extends layout

block content
  .background-img-regular
    .row 
      .col-sm-9.map
        #map
        #menu
              input#streets(type='radio', name='rtoggle', value='streets')
              label(for='streets') streets
              input#dark(type='radio', name='rtoggle', value='dark')
              label(for='dark') dark
              input#satellite-hybrid(type='radio', name='rtoggle', value='satellite')
              label(for='satellite') satellite
              input#outdoors(type='radio', name='rtoggle', value='outdoors')
              label(for='outdoors') outdoors
        .preloaderRubixCube

      .col-sm-3.info-pane
        #header
          form(id="searchForm", name="claim_search")
            div
              h2.search_box_title Search For Claims
              input(type="text", class="form-control", id="ClientNum", name="CLIENTNUM", placeholder="Client Number")
            div
              input(type="text", class="form-control", id="TNRNMBRD", name="TNRNMBRD", placeholder="Tenure Number")
            div
              select(name="TNRTPDSCRP", class='dropSearch', id='TNRTPDSCRP')
                option(value="") Claim Type
                option(value="Coal") Coal
                option(value="Mineral") Mineral
                option(value="Placer") Placer
            div
              input(type="text", class="form-control", id="GDTDT", name="GDTDT", placeholder="Choose Expiry Date")
            div
              input(type="text", class="form-control", id="ownerName", name="ownerName", placeholder="Owner Name")
            div
              input(type="submit", class="actions", value="Search")   

        .zoomLevel
        .results-count 

        .data-table

    //- Handlebars cdn
  script(src='https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.5/handlebars.min.js')

  //- Mapbox GL JS Script
  script(src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.15.0/mapbox-gl.js')
  link(rel='stylesheet', href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.15.0/mapbox-gl.css')
  
  //- Calendar Date Picker Script
  script(src="https://cdnjs.cloudflare.com/ajax/libs/pikaday/1.4.0/pikaday.min.js")
  link(rel='stylesheet', href='http://dbushell.github.io/Pikaday/css/pikaday.css')

  //- Handlebars template
  script#entry-template(type='text/x-handlebars-template').
    <h3>{{tenure}}</h3>
    <p>{{clinum}}</p>
    <p>{{claim_name}}</p>
    <p>{{owner_name}}</p>
    <p>{{type}}</p>
    <p>{{good_until}}</p>
    <p>{{issue_date}}</p>


  script.
    $('body > .container').css('margin-left', '0').css('width', '100%').css('margin-right', '0').css('padding-left', '20').css('padding-right', '20');

  script.

    $(function() {
      var geoData;
      var test;
      var headerHide = "nope";

      // Fancy Calendar Date Picker
      var picker = new Pikaday({ 
            field: $('#GDTDT')[0],
            format: 'YYYYMMDD'
        });

      // Map ZoomLogger
      var mapZoom = map.getZoom().toFixed(2);
      $("<h6>").appendTo(".zoomLevel").text("Zoom Level: " + mapZoom);
      map.on('zoomend', function() {
        mapZoom = map.getZoom().toFixed(2);
        $(".zoomLevel").empty();
        $("<h6>").appendTo(".zoomLevel").text("Zoom Level: " + mapZoom);
      });

        var regions = new mapboxgl.GeoJSONSource({ data: '/BC_mining_regions.geojson' });
        map.on('style.load', function () {
            map.addSource('regions', regions); // add
            map.addLayer({
                        'id': 'BCregions',
                        'type': 'fill',
                        'source': 'regions',
                        "interactive": true,
                        'layout': {},
                        'maxzoom': 6,
                        'paint': {
                            'fill-color': '#cc00cc',
                            'fill-opacity': 0.2,
                            'fill-outline-color': '#000'
                        }
                    }, 'water');
            map.addLayer({
                        'id': 'BCregions_hover',
                        'type': 'fill',
                        'source': 'regions',
                        'layout': {},
                        'maxzoom': 6,
                        'paint': {
                            'fill-color': '#cc00cc',
                            'fill-opacity': 0.8,
                            'fill-outline-color': '#fff'
                        },
                    "filter": ["==", "OBJECTID", ""]
                    });

            map.on("mousemove", function(e) {
              map.featuresAt(e.point, {
                radius: 1,  
                includeGeometry: true 
              }, function (err, features) {
        
                if (err) throw err

                 var ids = features.map(function (feat) { return feat.properties.OBJECTID });
                 console.log("ID:", ids);

                 map.setFilter('BCregions_hover', [ 'all',
                    [ 'in', 'OBJECTID' ].concat(ids)
                    ]);
                var table = $(".data-table").empty();
                features.forEach(function(result) {
                        var div_result = $("<div>").addClass("each_result_table").appendTo(table);
                        var context = result.properties.REG_NAME
                        div_result.html("<h4>"+context+"</h4>");
                    });  //Ends for each function
                })
            });
        });

        map.on("click", function(e) {
              map.featuresAt(e.point, {
                radius: 1,  
                includeGeometry: true 
              }, function (err, features) {
                    if (err) throw err
                    var name = features.map(function (feat) { return feat.properties.REG_NAME });
                    console.log(name);
                })
            });

      function loadData(results){

            $(".results-count").empty();
            $("<h6>").appendTo(".results-count").text("Results Count: " + results.length);

            // Changes format of GeoJSON
            polygons = {
              type: "FeatureCollection",
              features: results };

            // Remove existing map data if present 
            if (map.getSource('poly')) { map.removeSource('poly') };
            if (map.getLayer('Coal')) { map.removeLayer('Coal') };
            if (map.getLayer('Mineral')) { map.removeLayer('Mineral') };
            if (map.getLayer('Placer')) { map.removeLayer('Placer') };

            var poly = new mapboxgl.GeoJSONSource({ data: polygons });
                map.addSource('poly', poly); // add

                map.addLayer({
                    'id': 'Coal',
                    'type': 'fill',
                    'source': 'poly',
                    "interactive": true,
                    'layout': {},
                    "filter": ["==", "TNRTPDSCRP", "Coal"],
                    'paint': {
                        'fill-color': '#292929',
                        'fill-opacity': 0.4,
                        'fill-outline-color': '#000' 
                    }
                }, 'water');
                map.addLayer({
                    'id': 'Mineral',
                    'type': 'fill',
                    'source': 'poly',
                    "interactive": true,
                    'layout': {},
                    "filter": ["==", "TNRTPDSCRP", "Mineral"],
                    'paint': {
                        'fill-color': '#0033cc',
                        'fill-opacity': 0.4,
                        'fill-outline-color': '#000c2f' 
                    }
                }, 'water');
                map.addLayer({
                    'id': 'Placer',
                    'type': 'fill',
                    'source': 'poly',
                    "interactive": true,
                    'layout': {},
                    "filter": ["==", "TNRTPDSCRP", "Placer"],
                    'paint': {
                        'fill-color': '#cc00cc',
                        'fill-opacity': 0.4,
                        'fill-outline-color': '#800080' 
                    }
                }, 'water');
                map.addLayer({
                    "id": "hover",
                    "type": "fill",
                    "source": "poly",
                    "layout": {},
                    "paint": {
                        "fill-color": "#00892b",
                        "fill-opacity": 0.8,
                        'fill-outline-color': '#fff'
                    },
                    "filter": ["==", "TNRNMBRD", ""]
                });

                $(".preloaderRubixCube").fadeOut("slow");

                // Search box re-appear function
                //- $('.search_box_title').on('click', function(){
                //-     $(this).text("Search for Claims");
                //-     $('#header').animate({"height": "280px"}, 1000);
                //-     setTimeout(function(){ headerHide = "hideable" }, 8000);
                //-     console.log("Search Box Engaged");
                //- });

                var hoverFreezeEngaged = false;
                
                map.on("mousemove", function(e) {
                  map.featuresAt(e.point, {
                    radius: 5,  
                    includeGeometry: true 
                  }, function (err, features) {
            
                    if (err) throw err

                    // Search Box Hide Function
                    //- if (features && (headerHide === "hideable")) {
                    //-     $('#header').animate({"height": "50px"}, 1000, function() {
                    //-             $('.search_box_title').text("Click for Search");
                    //-             headerHide = "nope";
                    //-         });
                    //-     };

                     var ids = features.map(function (feat) { return feat.properties.TNRNMBRD });
                     console.log("ID:", ids);
                     //- console.log("Header", headerHide);
                     map.setFilter('hover', [ 'all',
                        [ 'in', 'TNRNMBRD' ].concat(ids)
                        ]);
                    map.on('click', function () {
                        hoverFreezeEngaged = ((hoverFreezeEngaged === true) ? false : true)
                        console.log("Map Freeze Clicked");
                    });
                    if (hoverFreezeEngaged != true) {
                        var table = $(".data-table").empty();
                    };
                    features.forEach(function(result) {

                        var div_result = $("<div>").addClass("each_result_table").appendTo(table);


                          //- handlebars templating for displaying claim details
                        var source   = $("#entry-template").html();
                        var template = Handlebars.compile(source);
                        var gtd = moment(result.properties.GDTDT).format('MMM DD, YYYY');
                        var issue = moment(result.properties.ISSUE_DATE).format('MMM DD, YYYY'); 

                        var context = {
                        clinum: "Client Number: " + result.properties.CLIENTNUM, 
                        claim_name: "Claim Name: " + result.properties.CLAIM_NAME,
                        owner_name: "Owner Name: " + result.properties.OWNER_NAME,
                        tenure: "Tenure: " + result.properties.TNRNMBRD,
                        type: "Type: " + result.properties.TNRTPDSCRP,
                        good_until: "Good To Date: " + gtd,
                        issue_date: "Issue Date: " + issue
                        }

                        var el_html = template(context);

                        div_result.html(el_html);
                    });  //Ends for each function
                  }); // Ends mousemove calback
                }); // Ends Hover Function (mousemove)
        };  // Ends function(results)

      $("#searchForm").on('submit',function(e){
        e.preventDefault();

        // Search Parameters
        var clientnum = $('#ClientNum').val();
        var TNRNMBRD = $('#TNRNMBRD').val();
        var TNRTPDSCRP = $('#TNRTPDSCRP').val();
        var GDTDT = $('#GDTDT').val();
        var ownerName = $('#ownerName').val();

        // Geo Query Stuff (Nick) 
        // The condition is for tenure searches
        if (TNRNMBRD) { 
            // Bounds for all of BC
            var ne_lat = 60.201513365378474;
            var ne_lng = -109.21174143971518;
            var sw_lat = 48.761051460064124;
            var sw_lng = -135.66274249731282;
        } else {
            var ne_lat = map.getBounds().getNorthEast().lat;
            var ne_lng = map.getBounds().getNorthEast().lng;
            var sw_lat = map.getBounds().getSouthWest().lat;
            var sw_lng = map.getBounds().getSouthWest().lng;
        };

        // Won't allow huge queries
        if ((map.getZoom() < 6) && (!clientnum) && (!TNRNMBRD) && (!ownerName)) {
            alert("Too much data, zoom in more or choose a more specific query.")
        } else {

        $(".preloaderRubixCube").css("display", "inline-block");
        headerHide = "hideable";

        //- Take form data and pass to server
        $.getJSON('/map/search', {
          clientnum: clientnum,
          TNRNMBRD: TNRNMBRD,
          TNRTPDSCRP: TNRTPDSCRP,
          GDTDT: GDTDT,
          ownerName: ownerName,
          ne_lat, ne_lng, sw_lat, sw_lng
        },  
         //- results from getJSON
        function(results){ 
            loadData(results);
            geoData = results;

            if (TNRNMBRD) {
                map.flyTo({
                    center: geoData[0].geometry.coordinates[0][0],
                    zoom: 12,
                    speed: 0.5
                });
            };
        });

        }; // Ends Zoom if condition
      }); // Ends the on submit click handler

      // Triggered when `setStyle` is called
    map.on('style.load', function () {
      if (geoData) loadData(geoData);
    });

    }); //-ends document ready. 

     mapboxgl.accessToken =  'pk.eyJ1Ijoibmd1c3QiLCJhIjoiY2lraHBnaDM3MDI4aHUwbTZnenJ5dno2YyJ9.8iIZEsDPnm2nQ4jV_Yj92A'; 

    var map = new mapboxgl.Map({
        container: 'map',
        style: '/outdoors-v8.json',
        //- center: [-120.79433441162108, 49.49935027965388],
        center: [-125.1318637, 54.3356591],
        zoom: 4
    });

    // Stuff for changing the base map
    var layerList = document.getElementById('menu');
    var inputs = layerList.getElementsByTagName('input');

    function switchLayer(layer) {
        var layerId = layer.target.id;
        if (layerId === 'outdoors') {
            map.setStyle('/outdoors-v8.json');
        } else {
        map.setStyle('mapbox://styles/mapbox/' + layerId + '-v8');
        }
    }

    for (var i = 0; i < inputs.length; i++) {
        inputs[i].onclick = switchLayer;
    }
